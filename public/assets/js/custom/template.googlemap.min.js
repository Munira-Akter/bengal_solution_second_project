"use strict";
var MICRO_OFFICE_STORAGE = micro_office_get_storage();
/* Google map initialization */
function micro_office_googlemap_init(dom_obj, coords) {
    "use strict";
    if (typeof MICRO_OFFICE_STORAGE['googlemap_init_obj'] == 'undefined') micro_office_googlemap_init_styles();
    MICRO_OFFICE_STORAGE['googlemap_init_obj'].geocoder = '';
    try {
        var id = dom_obj.id;
        MICRO_OFFICE_STORAGE['googlemap_init_obj'][id] = {
            dom: dom_obj,
            markers: coords.markers,
            geocoder_request: false,
            opt: {
                zoom: coords.zoom,
                center: null,
                scrollwheel: false,
                scaleControl: false,
                disableDefaultUI: false,
                panControl: true,
                zoomControl: true, //zoom
                mapTypeControl: false,
                streetViewControl: false,
                overviewMapControl: false,
                styles: MICRO_OFFICE_STORAGE['googlemap_styles'][coords.style ? coords.style : 'default'],
                mapTypeId: google.maps.MapTypeId.ROADMAP
            }
        };

        micro_office_googlemap_create(id);

    } catch (e) {

        dcl(MICRO_OFFICE_STORAGE['strings']['googlemap_not_avail']);

    };
}

function micro_office_googlemap_create(id) {
    "use strict";
    // Create map
    MICRO_OFFICE_STORAGE['googlemap_init_obj'][id].map = new google.maps.Map(MICRO_OFFICE_STORAGE['googlemap_init_obj'][id].dom, MICRO_OFFICE_STORAGE['googlemap_init_obj'][id].opt);

    // Add markers
    for (var i in MICRO_OFFICE_STORAGE['googlemap_init_obj'][id].markers)
        MICRO_OFFICE_STORAGE['googlemap_init_obj'][id].markers[i].inited = false;
    micro_office_googlemap_add_markers(id);

    // Add resize listener
    jQuery(window).resize(function() {
        "use strict";
        if (MICRO_OFFICE_STORAGE['googlemap_init_obj'][id].map)
            MICRO_OFFICE_STORAGE['googlemap_init_obj'][id].map.setCenter(MICRO_OFFICE_STORAGE['googlemap_init_obj'][id].opt.center);
    });
}

function micro_office_googlemap_add_markers(id) {
    "use strict";

    for (var i in MICRO_OFFICE_STORAGE['googlemap_init_obj'][id].markers) {

        if (MICRO_OFFICE_STORAGE['googlemap_init_obj'][id].markers[i].inited) continue;

        if (MICRO_OFFICE_STORAGE['googlemap_init_obj'][id].markers[i].latlng == '') {

            if (MICRO_OFFICE_STORAGE['googlemap_init_obj'][id].geocoder_request !== false) continue;

            if (MICRO_OFFICE_STORAGE['googlemap_init_obj'].geocoder == '') MICRO_OFFICE_STORAGE['googlemap_init_obj'].geocoder = new google.maps.Geocoder();
            MICRO_OFFICE_STORAGE['googlemap_init_obj'][id].geocoder_request = i;
            MICRO_OFFICE_STORAGE['googlemap_init_obj'].geocoder.geocode({
                address: MICRO_OFFICE_STORAGE['googlemap_init_obj'][id].markers[i].address
            }, function(results, status) {
                "use strict";
                if (status == google.maps.GeocoderStatus.OK) {
                    var idx = MICRO_OFFICE_STORAGE['googlemap_init_obj'][id].geocoder_request;
                    if (results[0].geometry.location.lat && results[0].geometry.location.lng) {
                        MICRO_OFFICE_STORAGE['googlemap_init_obj'][id].markers[idx].latlng = '' + results[0].geometry.location.lat() + ',' + results[0].geometry.location.lng();
                    } else {
                        MICRO_OFFICE_STORAGE['googlemap_init_obj'][id].markers[idx].latlng = results[0].geometry.location.toString().replace(/\(\)/g, '');
                    }
                    MICRO_OFFICE_STORAGE['googlemap_init_obj'][id].geocoder_request = false;
                    setTimeout(function() {
                        "use strict";
                        micro_office_googlemap_add_markers(id);
                    }, 200);
                } else
                    dcl(MICRO_OFFICE_STORAGE['strings']['geocode_error'] + ' ' + status);
            });

        } else {

            // Prepare marker object
            var latlngStr = MICRO_OFFICE_STORAGE['googlemap_init_obj'][id].markers[i].latlng.split(',');
            var markerInit = {
                map: MICRO_OFFICE_STORAGE['googlemap_init_obj'][id].map,
                position: new google.maps.LatLng(latlngStr[0], latlngStr[1]),
                clickable: MICRO_OFFICE_STORAGE['googlemap_init_obj'][id].markers[i].description != ''
            };
            if (MICRO_OFFICE_STORAGE['googlemap_init_obj'][id].markers[i].point) markerInit.icon = MICRO_OFFICE_STORAGE['googlemap_init_obj'][id].markers[i].point;
            if (MICRO_OFFICE_STORAGE['googlemap_init_obj'][id].markers[i].title) markerInit.title = MICRO_OFFICE_STORAGE['googlemap_init_obj'][id].markers[i].title;
            MICRO_OFFICE_STORAGE['googlemap_init_obj'][id].markers[i].marker = new google.maps.Marker(markerInit);

            // Set Map center
            if (MICRO_OFFICE_STORAGE['googlemap_init_obj'][id].opt.center == null) {
                MICRO_OFFICE_STORAGE['googlemap_init_obj'][id].opt.center = markerInit.position;
                MICRO_OFFICE_STORAGE['googlemap_init_obj'][id].map.setCenter(MICRO_OFFICE_STORAGE['googlemap_init_obj'][id].opt.center);
            }

            // Add description window
            if (MICRO_OFFICE_STORAGE['googlemap_init_obj'][id].markers[i].description != '') {
                MICRO_OFFICE_STORAGE['googlemap_init_obj'][id].markers[i].infowindow = new google.maps.InfoWindow({
                    content: MICRO_OFFICE_STORAGE['googlemap_init_obj'][id].markers[i].description
                });
                google.maps.event.addListener(MICRO_OFFICE_STORAGE['googlemap_init_obj'][id].markers[i].marker, "click", function(e) {
                    "use strict";
                    var latlng = e.latLng.toString().replace("(", '').replace(")", "").replace(" ", "");
                    for (var i in MICRO_OFFICE_STORAGE['googlemap_init_obj'][id].markers) {
                        if (latlng == MICRO_OFFICE_STORAGE['googlemap_init_obj'][id].markers[i].latlng) {
                            MICRO_OFFICE_STORAGE['googlemap_init_obj'][id].markers[i].infowindow.open(
                                MICRO_OFFICE_STORAGE['googlemap_init_obj'][id].map,
                                MICRO_OFFICE_STORAGE['googlemap_init_obj'][id].markers[i].marker
                            );
                            break;
                        }
                    }
                });
            }

            MICRO_OFFICE_STORAGE['googlemap_init_obj'][id].markers[i].inited = true;
        }
    }
}

function micro_office_googlemap_refresh() {
    "use strict";

    for (id in MICRO_OFFICE_STORAGE['googlemap_init_obj']) {
        micro_office_googlemap_create(id);
    }
}

function micro_office_googlemap_init_styles() {
    // Init Google map
    "use strict";

    MICRO_OFFICE_STORAGE['googlemap_init_obj'] = {};
    MICRO_OFFICE_STORAGE['googlemap_styles'] = {
        'default': []
    };
    if (window.micro_office_theme_googlemap_styles !== undefined)
        MICRO_OFFICE_STORAGE['googlemap_styles'] = micro_office_theme_googlemap_styles(MICRO_OFFICE_STORAGE['googlemap_styles']);
}

// Return template messages
function micro_office_get_storage() {
    "use strict";
    var micro_office_storage = {
        "system_message": {
            "message": "",
            "status": "",
            "header": ""
        },
        "theme_font": "Open Sans",
        "theme_color": "#2A3342",
        "theme_bg_color": "#E9E9E9",
        "strings": {
            "ajax_error": "Invalid server answer",
            "bookmark_add": "Add the bookmark",
            "bookmark_added": "Current page has been successfully added to the bookmarks. You can see it in the right panel on the tab &#039;Bookmarks&#039;",
            "bookmark_del": "Delete this bookmark",
            "bookmark_title": "Enter bookmark title",
            "bookmark_exists": "Current page already exists in the bookmarks list",
            "search_error": "Error occurs in AJAX search! Please, type your query and press search icon for the traditional search way.",
            "email_confirm": "On the e-mail address &quot;%s&quot; we sent a confirmation email. Please, open it and click on the link.",
            "reviews_vote": "Thanks for your vote! New average rating is:",
            "reviews_error": "Error saving your vote! Please, try again later.",
            "error_like": "Error saving your like! Please, try again later.",
            "error_global": "Global error text",
            "name_empty": "The name can&#039;t be empty",
            "name_long": "Too long name",
            "email_empty": "Too short (or empty) email address",
            "email_long": "Too long email address",
            "email_not_valid": "Invalid email address",
            "subject_empty": "The subject can&#039;t be empty",
            "subject_long": "Too long subject",
            "text_empty": "The message text can&#039;t be empty",
            "text_long": "Too long message text",
            "send_complete": "Send message complete!",
            "send_error": "Transmit failed!",
            "not_agree": "Please, check &#039;I agree with Terms and Conditions&#039;",
            "login_empty": "The Login field can&#039;t be empty",
            "login_long": "Too long login field",
            "login_success": "Login success! The page will be reloaded in 3 sec.",
            "login_failed": "Login failed!",
            "password_empty": "The password can&#039;t be empty and shorter then 4 characters",
            "password_long": "Too long password",
            "password_not_equal": "The passwords in both fields are not equal",
            "registration_success": "Registration success! Please log in!",
            "registration_failed": "Registration failed!",
            "geocode_error": "Geocode was not successful for the following reason:",
            "googlemap_not_avail": "Google map API not available!",
            "editor_save_success": "Post content saved!",
            "editor_save_error": "Error saving post data!",
            "editor_delete_post": "You really want to delete the current post?",
            "editor_delete_post_header": "Delete post",
            "editor_delete_success": "Post deleted!",
            "editor_delete_error": "Error deleting post!",
            "editor_caption_cancel": "Cancel",
            "editor_caption_close": "Close"
        },
        "ajax_url": "http:\/\/microoffice.themerex.net\/wp-admin\/admin-ajax.php",
        "ajax_nonce": "0ae88bf3ea",
        "site_url": "http:\/\/microoffice.themerex.net",
        "site_protocol": "http",
        "vc_edit_mode": "",
        "accent1_color": "#2A3342",
        "accent1_hover": "#1EBEB4",
        "slider_height": "100",
        "user_logged_in": "",
        "toc_menu": null,
        "toc_menu_home": "",
        "toc_menu_top": "",
        "menu_fixed": "",
        "menu_mobile": "0",
        "menu_hover": "",
        "menu_cache": "",
        "button_hover": "",
        "input_hover": "default",
        "demo_time": "0",
        "media_elements_enabled": "1",
        "ajax_search_enabled": "1",
        "ajax_search_min_length": "3",
        "ajax_search_delay": "200",
        "css_animation": "1",
        "menu_animation_in": "",
        "menu_animation_out": "",
        "popup_engine": "magnific",
        "email_mask": "^([a-zA-Z0-9_\\-]+\\.)*[a-zA-Z0-9_\\-]+@[a-z0-9_\\-]+(\\.[a-z0-9_\\-]+)*\\.[a-z]{2,6}$",
        "contacts_maxlength": "1000",
        "comments_maxlength": "1000",
        "remember_visitors_settings": "",
        "admin_mode": "",
        "isotope_resize_delta": "0.3",
        "error_message_box": null,
        "viewmore_busy": "",
        "video_resize_inited": "",
        "top_panel_height": "0"
    };
    return micro_office_storage;
}